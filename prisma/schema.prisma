generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Verdict from one of the curators on a prospect
enum CuratedStatus {
  RECOMMENDATION
  CORPUS
}

// A prospect that is deemed good enough for saving in the corpus
// and (optionally) making it to New Tab.
model ApprovedItem {
  // fields
  id           Int           @id @default(autoincrement())
  externalId   String        @default(uuid()) @db.VarChar(255)
  prospectId   String        @db.VarChar(255)
  url          String        @db.VarChar(500)
  title        String        @db.VarChar(255)
  excerpt      String        @db.Text
  status       CuratedStatus @default(CORPUS)
  language     String        @db.VarChar(2)
  publisher    String        @db.VarChar(255)
  imageUrl     String        @db.VarChar(500)
  topic        String        @db.VarChar(255)
  isCollection Boolean       @default(false)
  isShortLived Boolean       @default(false)
  isSyndicated Boolean       @default(false)
  createdAt    DateTime      @default(now())
  createdBy    String        @db.VarChar(255)
  updatedAt    DateTime      @updatedAt
  updatedBy    String?       @db.VarChar(255)

  // associated models
  scheduledItems ScheduledItem[]

  // indexes
  @@unique([externalId])
  @@unique([url])
}

model RejectedCuratedCorpusItem {
  // fields
  id         Int      @id @default(autoincrement())
  externalId String   @default(uuid()) @db.VarChar(255)
  prospectId String   @db.VarChar(255)
  url        String   @db.VarChar(500)
  title      String   @db.VarChar(255)
  topic      String   @db.VarChar(255)
  language   String   @db.VarChar(2)
  publisher  String   @db.VarChar(255)
  // Can be multiple reasons. For the MVP, Snowplow and the frontend
  // will be the only consumers of this data.
  // Will be likely stored either as comma-separated values or JSON.
  reason     String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  createdBy  String   @db.VarChar(255)

  // indexes
  @@unique([externalId])
  @@unique([url])
}

// A curated item that's been scheduled to go on to one or more New Tabs
model ScheduledItem {
  // fields
  id             Int      @id @default(autoincrement())
  externalId     String   @default(uuid()) @db.VarChar(255)
  approvedItemId Int
  newTabGuid     String   @db.VarChar(10)
  createdAt      DateTime @default(now())
  createdBy      String   @db.VarChar(255)
  updatedAt      DateTime @updatedAt
  updatedBy      String?  @db.VarChar(255)
  scheduledDate  DateTime @db.Date

  // associated entities
  approvedItem ApprovedItem @relation(fields: [approvedItemId], references: [id])

  // indexes
  @@unique([externalId])
}
